^T: Relational Models and the \\ Structured Query Language
^ST: RDBM and SQL
^H: \include{sqllst}
^H: \include{pythonlst}

../img/rich_guys.jpg:1.0:full
\caveat{1}{20}{21}{92}{0}{Who are these people?}

../img/ellison.jpg:1.0:full
\only<2>{\placegraphic{29}{88}{10cm}{../img/oracle_logo}}

+++ Databases as Infrastructure
- Since they are not consumer-facing products, database systems fly under the radar like our energy infrastructure.  But they are very, very important.
- They power the deep content of the internet: blogs, consumer applications, health services, etc.
-- Typical web application is server + database + scripting language.
- Huge problems in health services, government, etc. from failure to construct consistent or interoperable models.
-- This is totally solvable, but more political than technical!

+ Databases: or, Another Data Source
- Databases store data efficiently and retrieve it quickly.
-- Typical computers have 8-16 GB of memory: a hard limit on what you can simultaneously load.  Databases allow efficient row-wise calulations.
-- Search efficiently over many GBs, or hundreds of GBs of data...
-- Maintain \emph{one} copy of the data; allow many people to acces it (servers).
-- \emph{Really} huge datasets need different models than discussed today.
- In the `relational model,' data are stored in interrelated `tables.'
- Each record (row) is uniquely identified by a `primary key' (index).
- Differs from composite objects in object-oriented programming, since many records in one table may link to a single record of another (e.g., people to a city) and several records may link in different ways (grade to teacher, student, and school).

+ Our Example: The American Time Use Survey
- ATUS is a subset of the Current Population Survey.
- Respondents record all activities performed on a ``diary day."
- Survey provides micro-data in tables including:
-- \chred{CPS}: data from the CPS interviews.
-- \chred{Roster}: Stats on each member of the household + non-hh children, and relationship to respondent.
-- \chred{Respondent}: Detailed info and summary data on the respondent.
-- \chred{Activity}: Detailed code and duration of each activity in the day.

+ Tables of the American Time Use Survey
../img/rdb.pdf

+ The Relational Model: Normal Forms (Good Practice)
Normal forms are defined by E. F. Codd (1971) as: 
# Each record should be `atomic' that is, non-divisible.  A single row/record, should not contain multiple, divisible pieces.
#- The respondent table should not have a cell with the ages of all household members (stored in a `roster' file).
# No non-prime attribute of the table may be dependent on a proper subset of \emph{any} candidate key.
#- In the time use survey, a respondent ID and activity number jointly identify an activity.  The table should not, therefore, contain information on the respondent.
# The values in a row should refer uniquely to the key -- not to a non-key attribute.
#- In the time use activity tables, we should not store both the activity code and its interpretation.
To avoid repeating cumbersome calculations, these are sometimes violated.

+ RDB: Time Use Survey, Revisited
../img/rdb.pdf

+ Good Practice, in Practice
- Each table should contain a single logical element, without repetition.
- One MUST take some care to understand what is unique in your table, and use that property to link tables: the \emph{primary key}.
- Appropriate primary keys are what make databases actually work efficiently.

+++ Using a Database

+ Relational Database Management Systems (RDBMSs) \\ and the Structured Query Language (SQL)
- Most of the most-prevalent database systems implement the relational model.\footnote{There are always exceptions...}  These systems are called RDBMSs.
- Structured Query Language (SQL) is a standardized (ANSI/ISO 9075) language for interacting with RDBMSs.
- Originally intended to be user-facing, so `fairly intuititive.'
- Despite standardization, the implementations almost all have some (extremely annoying) differences: some tinkering is necessary to migrate between `dialects.'
-- Nevertheless, the basic functionality -- selecting, inserting, deleting, and altering data, is pretty consistent.

+ (Some of) The Most Prevalent Databases
../img/db_logo.pdf
% args are: slide iteration, size, x, y, angle, text
\caveat{2}{25}{68}{84}{20}{NoSQL}
\caveat{3}{28}{34}{61}{20}{This}
\caveat{3}{28}{40}{67}{20}{class.}

+ Opening SQLite
- To just open a file, do:
` \pr sqlite3 atus.sqlite
- This should give you a new prompt.

+ Navigating SQLite: Time Use Survey
The biggest differences between RDBMS implementations are accessing metadata: table names and schema (columns).
- To show the tables in the database:
` sqlite> .tables \\ sqlite> .fullschema --indent
- To show the `schema' of a table (its columns and types):
` sqlite> .schema cps
- Types in SQLite: integer, real (float), text (string), or null.
-- Other RDBMSs have more types -- e.g., datetime, or even geographies.
-- SQLite just has date \emph{functions}.

+ \tt{SELECT}ing Columns \tright \small{\tt{ex/select\_*from\_cps.sql}}
This is THE basic SQL syntax that you will use.
- Selecting \emph{all} (\tt{*}) columns from the cps table:
\sqlexternal{ex/select_from_cps.sql}
- You can also name specific columns:
\sqlexternal{ex/select_vars_from_cps.sql}
- Each query ends by a semi-colon.
> 1em
- Upper case keywords an old convention: SQL strings are often used in other languages, and therefore aren't color-highlighted.  Not necessary.
- There is absolutely \emph{no} requirement about the formatting of the query.

+ Running Queries in SQLite 
To make the output clearer, you can do:\footnote{You can also put these two lines in your \tt{\~{}/.sqliterc} file, that will run each time you open sqlite3.}
` \pr .mode columns \\ \pr .headers on
You can also run queries in a file, like so:
` \pr sqlite3 atus.sqlite < ex/limit\_cps.sql
We'll talk about interfacing to pandas, on Wednesday

+ \tt{LIMIT} (i.e., .head()) \tright \small{\tt{ex/limit\_cps.sql}}
- To reduce output, for exploration, use `\tt{LIMIT}':
\sqlexternal{ex/limit_cps.sql}

+ \tt{WHERE} Requirements ($\unsim$Masking) \tright \small{\tt{ex/where*.sql}}
- Make requirements with `\tt{WHERE}':
\sqlexternal{ex/where_simple.sql}
- Can make multiple requirements with \tt{AND} or \tt{OR}:
\sqlexternal{ex/where_and.sql}
- Comment to end of line by \tt{\blue{--}}, or between two markers \tt{\blue{/* to */}}.

+ \tt{GROUP BY} (i.e., .groupby()) \tright \small{\tt{ex/group*.sql}}
- This functions exactly as groupby() in pandas.
- `Group' by one or more variables, to aggregate over others.
-- Unlike most RDBMSs, SQLite won't complain if you mix and match aggregating functions and non-aggregated fields -- so be careful.
- Many functions: \tt{AVG}, \tt{SUM}, \tt{MAX}, \tt{MIN}, \tt{COUNT}, etc.
\sqlexternal{ex/group_alone_time.sql}

+ \tt{ORDER BY} (i.e., .sort\_values(by = ``...")) \tright \small{\tt{ex/order*.sql}}
- Sort by one or more fields, ascending or descending (\tt{ASC} or \tt{DESC}).
\sqlexternal{ex/order_group_education_state.sql}
- Note also the use of \tt{AS} (like in python!), to alias a long column name.

+ \tt{JOIN} (i.e., .join()) \tright \small{\tt{ex/join*.sql}}
- In households with children, what is the likelihood that a spouse or partner is present, by levels of education.  Must \tt{JOIN} tables.
- Alternatively, this can be done with multiple tables in `\tt{FROM}' and join conditions under `\tt{WHERE}.'
\only<1>{\sqlexternal{ex/join.sql}}
\only<2>{\sqlexternal{ex/join_where.sql}}

+ \tt{HAVING} (Requirements on Groups) \tright \small{\tt{ex/having.sql}}
- \tt{HAVING} is like \tt{WHERE} for grouped values.
- For instance, you could present averages only for groups with \tt{COUNT()} larger than 30, or averages or sums above a threshold.
\sqlexternal{ex/having.sql}

+ Subqueries \tright \small{\tt{ex/subquery.sql}}
- You can use subqueries as tables, for multiple levels of grouping.
- How much time does each sex claim to spend in `Personal/Private activities' such as `necking' and `private activity, unspecified'?
\sqlexternal{ex/subquery.sql}

+ On The Structure
- Good news is: SQL queries basically always follow the same structure.  
- You may or may not need all the pieces, but there's no question about the order-- there's only one way.  
- There are a few more keywords, but the format of the query on the last page is as complicated as \tt{SELECT} statements get.

+++ Creating Tables

+ \tt{CREATE TABLE}
- Most likely, you will be a database user rather than developer, but it's useful to understand how to create a simple database.
` \pr sqlite3 my\_new\_db.sqlite
\sqlexternal{ex/create.sql}
- This defines the \emph{schema} of a table.
-- SQLite recognizes: \tt{INTEGER}, \tt{REAL}, \tt{TEXT}, \tt{BLOB}, and \tt{NULL}.
- The \tt{id} column will auto-increment, to provide a unique primary key.
- \tt{NOT NULL} and \tt{PRIMARY KEY} are \emph{constraints}, that help the RDBMS optimally parse a statement.

+ \tt{INSERT} Rows \tright \small{\tt{ex/insert.sql}}
- Insert values like so:
\sqlexternal{ex/insert.sql}
- Multiple values are both convenient and efficient.

''' When the RDBMS evaluates a statement, it begins by `parsing' and compiling it: reading it and turning it into a computer-ready, optimized plan.  Most RDBMSs treat this as separate from the execution step, so you can `recycle' the execution plan.  

+ Creating a Table From the Command Line
- There's a shortcut in \tt{sqlite3} for loading data from a csv file.
-- All RDBMSs provide some analogous functionality for loading data.
` \pr CREATE TABLE chicago (Last TEXT, First TEXT, Position TEXT, Department TEXT, FP TEXT, SH TEXT, Hours INTEGER, Salary REAL, Wage REAL);\\ \pr .mode csv \\ \pr \chred{.import salaries.csv chicago} \\ \pr .mode columns
- Let's ask some simple questions:
-- Best-paid salaried workers in the city?
-- Departments with the highest average salary?
-- Departments with the highest fraction non-salaried workers?
- You'll try this, for homework.

+++ Access from Python 

+ Using the \tt{sqlite3} Library
- Straightforward python interface: \tt{sqlite3} (\link{https://docs.python.org/3.5/library/sqlite3.html}{docs}).
- And pandas totally builds in support, like read\_csv/read\_json.
\only<1>{\pythonexternal{ex/sqlite_minimal.py}}
\only<2>{\pythonexternal{ex/sqlite_pandas.py}}

+ Broader Example: Child Engagement
- Want direct child engagement by parent education.
-- Will sum over activities, per person.
- Use \tt{years\_education}, \tt{activity\_code}, and \tt{duration}; join on \tt{case\_id} and \tt{line\_no}.
-- Codes are codes 301XX, 302XX, 303XX.
- Require children in household and respondent to work (edited\_labor\_force\_status $<$ 3).
>1em
# Write a SQL query to give us the formatted data.
# Use this query load the data in pandas, and plot it.

+ Engagement: SQL \tright \small{\tt{ex/direct\_engagement.sql}}
\sqlexternal{ex/direct_engagement.sql}

+ Engagement: Python \tright \small{\tt{ex/child\_engagement.py}}
\pythonexternal{ex/child_engagement.py}

+ Engagement: Results
<0.5em
engagement.pdf:0.9

+ Housework: Python 
\pythonexternal{ex/housework.py}

+ Housework: Results
<0.5em
housework.pdf:0.85

